# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import comparator_service.comparator_pb2 as comparator__pb2


class ComparatorServiceStub(object):
    """The service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTopKPlans = channel.unary_unary(
                '/ComparatorService/GetTopKPlans',
                request_serializer=comparator__pb2.TopKRequest.SerializeToString,
                response_deserializer=comparator__pb2.TopKResponse.FromString,
                )
        self.CompareCost = channel.unary_unary(
                '/ComparatorService/CompareCost',
                request_serializer=comparator__pb2.CompareRequest.SerializeToString,
                response_deserializer=comparator__pb2.DataResponse.FromString,
                )
        self.CanBeBroadcast = channel.unary_unary(
                '/ComparatorService/CanBeBroadcast',
                request_serializer=comparator__pb2.BroadcastRequest.SerializeToString,
                response_deserializer=comparator__pb2.DataResponse.FromString,
                )


class ComparatorServiceServicer(object):
    """The service definition
    """

    def GetTopKPlans(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompareCost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CanBeBroadcast(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ComparatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTopKPlans': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopKPlans,
                    request_deserializer=comparator__pb2.TopKRequest.FromString,
                    response_serializer=comparator__pb2.TopKResponse.SerializeToString,
            ),
            'CompareCost': grpc.unary_unary_rpc_method_handler(
                    servicer.CompareCost,
                    request_deserializer=comparator__pb2.CompareRequest.FromString,
                    response_serializer=comparator__pb2.DataResponse.SerializeToString,
            ),
            'CanBeBroadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.CanBeBroadcast,
                    request_deserializer=comparator__pb2.BroadcastRequest.FromString,
                    response_serializer=comparator__pb2.DataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ComparatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ComparatorService(object):
    """The service definition
    """

    @staticmethod
    def GetTopKPlans(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ComparatorService/GetTopKPlans',
            comparator__pb2.TopKRequest.SerializeToString,
            comparator__pb2.TopKResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompareCost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ComparatorService/CompareCost',
            comparator__pb2.CompareRequest.SerializeToString,
            comparator__pb2.DataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CanBeBroadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ComparatorService/CanBeBroadcast',
            comparator__pb2.BroadcastRequest.SerializeToString,
            comparator__pb2.DataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
